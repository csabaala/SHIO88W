esphome:
  name: shio88w-ads-oled
  on_boot:
    - priority: 600
      then:
        - display.page.show: info
        - switch.turn_on: uid
        - delay: 500ms
        - switch.turn_off: uid
    - priority: 250
      then:
        - switch.turn_on: uid
        - delay: 500ms
        - switch.turn_off: uid

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  baud_rate: 0

# Enable Home Assistant API
api:
  password: ""
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: "ssid"
  password: "password"
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "SHIO88W Fallback Hotspot"
    password: "esphome1234"
  #use_address: 192.168.1.118

captive_portal:

web_server:
  version: 3
# Activates prometheus /metrics endpoint
prometheus:
  
globals:
   - id: last_press
     type: 'unsigned long'
     restore_value: no
     initial_value: '0'
   - id: menu_hide_delay
     type: 'int'
     restore_value: no
     initial_value: '30'

time:
  - platform: sntp
    on_time:
      # Every minutes
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              int elapsed = (millis() - id(last_press)) / 1000;
              if(elapsed > id(menu_hide_delay)){
                id(my_menu).hide();
                id(clear).show();
              }

switch:
  - platform: gpio
    id: O1
    name: "O1"
    pin: 4
  - platform: gpio
    id: O2
    name: "O2"
    pin: 16
  - platform: gpio
    id: O3
    name: "O3"
    pin: 17
  - platform: gpio
    id: O4
    name: "O4"
    pin: 18
  - platform: gpio
    id: O5
    name: "O5"
    pin: 19
  - platform: gpio
    id: O6
    name: "O6"
    pin: 21
  - platform: gpio
    id: O7
    name: "O7"
    pin: 22
  - platform: gpio
    id: O8
    name: "O8"
    pin: 23
  - platform: gpio
    id: uid
    name: "UID"
    pin: 12

binary_sensor:
#inputs on terminal blocks
  - platform: gpio
    id: I1
    name: "I1"
    pin:
      number: 14
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
        - switch.turn_on: O1
    on_release:
      then:
        - switch.turn_off: O1
  - platform: gpio
    id: I2
    name: "I2"
    pin:
      number: 27
      inverted: true
      mode:
        input: true
        pullup: true
  - platform: gpio
    id: I3
    name: "I3"
    pin:
      number: 26
      inverted: true
      mode:
        input: true
        pullup: true
  - platform: gpio
    id: I4
    name: "I4"
    pin:
      number: 25
      inverted: true
      mode:
        input: true
        pullup: true
  - platform: gpio
    id: I5
    name: "I5"
    pin:
      number: 35
      inverted: true
      mode:
        input: true
  - platform: gpio
    id: I6
    name: "I6"
    pin:
      number: 34
      inverted: true
      mode:
        input: true
  - platform: gpio
    id: I7
    name: "I7"
    pin:
      number: 13
      inverted: true
      mode:
        input: true
        pullup: true
  - platform: gpio
    id: I8
    name: "I8"
    pin:
      number: 5
      inverted: true
      mode:
        input: true
        pullup: true
#buttons
  - platform: gpio
    name: "BTN F1"
    pin:
      number: 36
      inverted: true
      mode:
        input: true
    on_press:
          - display_menu.up: my_menu
          - lambda: |-
              id(last_press) = millis();
  - platform: gpio
    name: "BTN F2"
    pin:
      number: 39
      inverted: true
      mode:
        input: true
    on_press:
      - display_menu.down: my_menu
      - lambda: |-
          id(last_press) = millis();
  - platform: gpio
    name: "BTN BOOT"
    pin:
      number: 0
      inverted: true
      mode:
        input: true
    on_press:
    - if:
       condition:
          display_menu.is_active: my_menu
       then:
          - display_menu.enter: my_menu
       else:
          - display_menu.show:  my_menu
    - lambda: |-
        id(last_press) = millis();

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
  - platform: dht
    pin: 15
    model: AM2302
    temperature:
      name: "Temp"
      id: temp
    humidity:
      name: "Humidity"
      id: hum
    update_interval: 60s
  - platform: ads1115
    id: AI1
    multiplexer: 'A0_GND'
    gain: 6.144
    update_interval: 10s
    ads1115_id: "ads1115_1"
    name: "A1"
  - platform: ads1115
    id: AI2
    multiplexer: 'A1_GND'
    gain: 6.144
    update_interval: 10s
    ads1115_id: "ads1115_1"
    name: "A2"
  - platform: ads1115
    id: AI3
    multiplexer: 'A2_GND'
    gain: 6.144
    update_interval: 10s
    ads1115_id: "ads1115_1"
    name: "A3"
  - platform: ads1115
    id: AI4
    multiplexer: 'A3_GND'
    gain: 6.144
    update_interval: 10s
    ads1115_id: "ads1115_1"
    name: "A4"
  - platform: ads1115
    id: AI5
    multiplexer: 'A0_GND'
    gain: 6.144
    update_interval: 10s
    ads1115_id: "ads1115_2"
    name: "A5"
  - platform: ads1115
    id: AI6
    multiplexer: 'A1_GND'
    gain: 6.144
    update_interval: 10s
    ads1115_id: "ads1115_2"
    name: "A6"
  - platform: ads1115
    id: AI7
    multiplexer: 'A2_GND'
    gain: 6.144
    update_interval: 10s
    ads1115_id: "ads1115_2"
    name: "A7"
  - platform: ads1115
    id: AI8
    multiplexer: 'A3_GND'
    gain: 6.144
    update_interval: 10s
    ads1115_id: "ads1115_2"
    name: "A8"

i2c:
  sda: 32
  scl: 33
  scan: true
  frequency: 400kHz
  id: i2c_bus

ads1115:
  - address: 0x48
    id: ads1115_1
    continuous_mode: False
  - address: 0x49
    continuous_mode: False
    id: ads1115_2

#test OLED LCD
font:
  - file: "arial.ttf"
    id: arial_11
    size: 11
  - file: "arial.ttf"
    id: arial_13
    size: 13
  - file: "arial.ttf"
    id: arial_14
    size: 14
  - file: "arial.ttf"
    id: arial_16
    size: 16
  - file: "arial.ttf"
    id: arial_18
    size: 18

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    update_interval: 1s
    id: oled
    pages:
      - id: clear
        lambda: |-
          it.print(0, 0, id(arial_14), "");
      - id: io_state
        lambda: |-
          int circles_r = 4;
          int circles_y = 25;
          int circles_start_x = 38;
          int circles_spacing = 12;
          int numbers_x = 35;
          int numbers_y = 4;
          int label_x = 0;

          //Print OUTPUT state
          int state[8];
          state[0] = id(O1).state;
          state[1] = id(O2).state;
          state[2] = id(O3).state;
          state[3] = id(O4).state;
          state[4] = id(O5).state;
          state[5] = id(O6).state;
          state[6] = id(O7).state;
          state[7] = id(O8).state;
          it.print(label_x, numbers_y, id(arial_14), "OUT");
          it.print(numbers_x, numbers_y, id(arial_14), "1 2 3 4 5 6 7 8");
          int x = circles_start_x;
          for(int i = 0; i < 8; i++){
            if(state[i]){
              it.filled_circle(x, circles_y, circles_r);
            }
            else{
              it.circle(x, circles_y, circles_r);
            }
            x += circles_spacing;
          }
          //Spacing
          numbers_y += 33;
          circles_y += 33;
          //Print INPUT state
          state[0] = id(I1).state;
          state[1] = id(I2).state;
          state[2] = id(I3).state;
          state[3] = id(I4).state;
          state[4] = id(I5).state;
          state[5] = id(I6).state;
          state[6] = id(I7).state;
          state[7] = id(I8).state;
          it.print(label_x, numbers_y, id(arial_14), "IN");
          it.print(numbers_x, numbers_y, id(arial_14), "1 2 3 4 5 6 7 8");
          x = circles_start_x;
          for(int i = 0; i < 8; i++){
            if(state[i]){
              it.filled_circle(x, circles_y, circles_r);
            }
            else{
              it.circle(x, circles_y, circles_r);
            }
            x += circles_spacing;
          }
      - id: ads_state
        lambda: |-
          int x_row_1 = 0, x_row_2 = 64;
          int y_line = 0, y_step = 15;
          it.printf(x_row_1, y_line, id(arial_11), "AI1: %.2f", id(AI1).state);
          y_line += y_step;
          it.printf(x_row_1, y_line, id(arial_11), "AI2: %.2f", id(AI2).state);
          y_line += y_step;
          it.printf(x_row_1, y_line, id(arial_11), "AI3: %.2f", id(AI3).state);
          y_line += y_step;
          it.printf(x_row_1, y_line, id(arial_11), "AI4: %.2f", id(AI4).state);
          y_line = 0; //new row
          it.printf(x_row_2, y_line, id(arial_11), "AI5: %.2f", id(AI5).state);
          y_line += y_step;
          it.printf(x_row_2, y_line, id(arial_11), "AI6: %.2f", id(AI6).state);
          y_line += y_step;
          it.printf(x_row_2, y_line, id(arial_11), "AI7: %.2f", id(AI7).state);
          y_line += y_step;
          it.printf(x_row_2, y_line, id(arial_11), "AI8: %.2f", id(AI8).state);
      - id: dht_state
        lambda: |-
          int x_row_1 = 0;
          int y_line = 0, y_step = 30;
          it.printf(x_row_1, y_line, id(arial_18), "TMP: %.2f Â°C", id(temp).state);
          y_line += y_step;
          it.printf(x_row_1, y_line, id(arial_18), "HUM: %.2f %%", id(hum).state);
      - id: info
        lambda: |-
          int x_row_1 = 0, x_row_2 = 30;
          int y_line = 0, y_step = 15;
          it.print(x_row_1, y_line, id(arial_11), "ID:");
          it.print(x_row_2, y_line, id(arial_11), App.get_name().c_str());
          y_line += y_step;
          it.print(x_row_1, y_line, id(arial_11), "IP:");
          it.print(x_row_2, y_line, id(arial_11), WiFi.localIP().toString().c_str());
          y_line += y_step;
          it.print(x_row_1, y_line, id(arial_11), "MAC:");
          it.print(x_row_2, y_line, id(arial_11), WiFi.macAddress().c_str());
          y_line += y_step;
          it.print(x_row_1, y_line, id(arial_11), "SIG:");
          it.printf(x_row_2, y_line, id(arial_11), "%d dBm", WiFi.RSSI());
      - id: tmp
        lambda: |-
          it.printf(0, 0, id(arial_11), "Temp: %.2f Â°C", id(temp).state);
          it.graph(0, 14, id(temp_graph));

graphical_display_menu:
  id: my_menu
  display: oled
  font: arial_14
  on_redraw:
    then:
      component.update: oled
  active: false
  mode: rotary
  items:
    - type: Menu
      text: 'Control output'
      items:
        - type: switch
          immediate_edit: true
          text: 'OUT 1'
          switch: O1
        - type: switch
          immediate_edit: true
          text: 'OUT 2'
          switch: O2
        - type: switch
          immediate_edit: true
          text: 'OUT 3'
          switch: O3
        - type: switch
          immediate_edit: true
          text: 'OUT 4'
          switch: O4
        - type: switch
          immediate_edit: true
          text: 'OUT 5'
          switch: O5
        - type: switch
          immediate_edit: true
          text: 'OUT 6'
          switch: O6
        - type: switch
          immediate_edit: true
          text: 'OUT 7'
          switch: O7
        - type: switch
          immediate_edit: true
          text: 'OUT 8'
          switch: O8
        - type: back
          text: 'Back'
    - type: command
      text: 'IO state'
      on_value:
        then:
          - display_menu.hide: my_menu
          - display.page.show: io_state
    - type: command
      text: 'ADS state'
      on_value:
        then:
          - display_menu.hide: my_menu
          - display.page.show: ads_state
    - type: command
      text: 'DHT state'
      on_value:
        then:
          - display_menu.hide: my_menu
          - display.page.show: dht_state
    - type: command
      text: 'Temp graph'
      on_value:
        then:
          - display_menu.hide: my_menu
          - display.page.show: tmp
    - type: command
      text: 'Info'
      on_value:
        then:
          - display_menu.hide: my_menu
          - display.page.show: info
    - type: command
      text: 'Hide'
      on_value:
        then:
          - display_menu.hide: my_menu
          - display.page.show: clear

graph:
  - id: temp_graph
    duration: 1h
    width: 128
    height: 50
    traces:
      - sensor: temp
        line_type: SOLID
        line_thickness: 2

uart:
  baud_rate: 9600
  tx_pin: 1
  rx_pin: 3

modbus:
 flow_control_pin: 2